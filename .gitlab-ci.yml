---
image: danischm/nac:0.1.1
stages:
  - validate
  - plan
  - deploy
  - test
  - notify

variables:
  ## Disable SSL verification for git operation
  GIT_SSL_NO_VERIFY: "true"

  SDWAN_USERNAME:
    description: "Cisco SDWAN Username"
  SDWAN_PASSWORD:
    description: "Cisco SDWAN Password"
  SDWAN_URL:
    description: "Cisco SDWAN URL"
  GITLAB_TOKEN:
    description: "User Access Token. Used to create comments on Merge Requests"
  TF_HTTP_USERNAME:
    description: "GitLab Username"
    value: "gitlab-ci-token"
  TF_HTTP_PASSWORD:
    description: "GitLab Access Token"
    value: "${CI_JOB_TOKEN}"
  WEBEX_ROOM_ID:
    description: "Cisco Webex Room ID"
  WEBEX_TOKEN:
    description: "Cisco Webex Bot Token"
  GITLAB_API_URL:
    description: "GitLab API v4 root URL"
    value: "${CI_API_V4_URL}"
  TF_HTTP_ADDRESS:
    description: "GitLab HTTP Address to store the TF state file"
    value: "${GITLAB_API_URL}/projects/${CI_PROJECT_ID}/terraform/state/tfstate"
  TF_HTTP_LOCK_ADDRESS:
    description: "GitLab HTTP Address to lock the TF state file"
    value: ${TF_HTTP_ADDRESS}/lock
  TF_HTTP_LOCK_METHOD:
    description: "Method to lock TF state file"
    value: POST
  TF_HTTP_UNLOCK_ADDRESS:
    description: "GitLab HTTP Address to unlock the TF state file"
    value: ${TF_HTTP_ADDRESS}/lock
  TF_HTTP_UNLOCK_METHOD:
    description: "Method to unlock TF state file"
    value: DELETE
  SSL_CERT_DIR:
    value: "/etc/gitlab-runner/ssl"

cache:
  key: terraform_modules_and_lock
  paths:
    - .terraform
    - .terraform.lock.hcl

validate:
  stage: validate
  script:
    - set -o pipefail && terraform fmt |& tee fmt_output.txt
    - set -o pipefail && iac-validate --non-strict ./data/ |& tee validate_output.txt
  artifacts:
    when: always
    paths:
      - fmt_output.txt
      - validate_output.txt
  cache: []
  rules:
    - if: $CI_COMMIT_TAG == null

plan:
  stage: plan
  resource_group: sdwan
  script:
    - terraform init -input=false
    - terraform plan -out=plan.tfplan -input=false
    - terraform show -no-color plan.tfplan > plan.txt
    - terraform show -json plan.tfplan | jq > plan.json
    - terraform show -json plan.tfplan | jq '([.resource_changes[]?.change.actions?]|flatten)|{"create":(map(select(.=="create"))|length),"update":(map(select(.=="update"))|length),"delete":(map(select(.=="delete"))|length)}' > plan_gitlab.json
    #- python3 .ci/gitlab-comment.py
  artifacts:
    when: always
    paths:
      - plan.json
      - plan.txt
      - plan.tfplan
      - plan_gitlab.json
    reports:
      terraform: plan_gitlab.json
  dependencies: []
  needs:
    - validate
  only:
    - merge_requests
    - main

deploy:
  stage: deploy
  resource_group: sdwan
  script:
  - |
    echo "Starting the deployment process..."
    MAX_RETRIES=6
    COUNTER=0
    while [ $COUNTER -lt $MAX_RETRIES ]; do
      echo "Running terraform plan... (Attempt: $((COUNTER + 1)))"
      terraform plan -out=plan.tfplan  -input=false
      terraform show -json plan.tfplan | jq '([.resource_changes[]?.change.actions?]|flatten)|{"create":(map(select(.=="create"))|length),"update":(map(select(.=="update"))|length),"delete":(map(select(.=="delete"))|length)}' > plan_gitlab.json
      result=$(cat plan_gitlab.json | jq -r '.create >= 1 or .update >= 1')
      if [ "$result" = true ]; then
        echo "Changes to apply."
        terraform apply -input=false -auto-approve plan.tfplan |& tee -a deploy_output.txt
      else 
        echo "No changes to apply."
        break
      fi
      COUNTER=$((COUNTER+1))
    done 
    if [ $COUNTER -eq $MAX_RETRIES ]; then
      echo "Reached maximum number of apply attempts without reaching a stable state."
      exit 1
    fi
    echo "Deployment process finished." 
  artifacts:
    when: always
    paths:
      - defaults.yaml
  dependencies:
    - plan
  needs:
    - plan
  only:
    - main

test-integration:
  stage: test
  script:
    - set -o pipefail && iac-test -d ./data -d ./defaults.yaml -t ./tests/templates -o ./tests/results/sdwan |& tee test_output.txt
  artifacts:
    when: always
    paths:
      - tests/results/sdwan/*.html
      - tests/results/sdwan/xunit.xml
      - test_output.txt
    reports:
      junit: tests/results/sdwan/xunit.xml
  dependencies:
    - deploy
  needs:
    - deploy
  only:
    - main

# test-idempotency:
#   stage: test
#   resource_group: sdwan
#   script:
#     - terraform init -input=false
#     - terraform plan -input=false -detailed-exitcode
#   dependencies:
#     - deploy
#   needs:
#     - deploy
#   only:
#     - main

failure:
  stage: notify
  script:
    - python3 .ci/webex-notification-gitlab.py -f
  when: on_failure
  artifacts:
    when: always
    paths:
      - tests/results/sdwan/*.html
      - tests/results/sdwan/xunit.xml
      - plan.txt
      - fmt_output.txt
      - validate_output.txt
      - test_output.txt
  cache: []

success:
  stage: notify
  script:
    - python3 .ci/webex-notification-gitlab.py -s
  when: on_success
  artifacts:
    when: always
    paths:
      - tests/results/sdwan/*.html
      - tests/results/sdwan/xunit.xml
      - plan.txt
      - fmt_output.txt
      - validate_output.txt
      - test_output.txt
  cache: []